* Handle issues brought to light with: find objects/ -name *.rb | xargs reek

* Incorporate fitness in Chromosome:
  * Fitness has two parts:
    1) When the environment is initialized, all Chromosomes should have their fitness set to 0.5
    2) Fitness is recalculated each round, with the weakest organism getting 0 and the strongest match getting 1; inner values are uniformly distributed
    
* Start building the petri.rb file out.
  * Container for multiple chromosomes
  * Concept of rounds
    1) Compare to target (Pixel by pixel comparison to get a 3D [RGB] Euclidian distance from the target)
      a) Use a cache from object_id => similarity to reduce number of comparisons necessary
    2) Sort by rank
    3) Update fitness (Normal distribution 0..1)
    4) Prune weak organisms (Remove entries in the similarity cache)
    5) Randomly pair off organisms for mitosis (Use get_normal_random_variable to favor higher fitness organisms?)
    
* Integrate an image library and plan out the render operation

* Think about using the garbage collector...